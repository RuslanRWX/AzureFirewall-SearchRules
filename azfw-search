#!/usr/bin/env python3
# azfw-search
# The script can help to find rule in Azure Firewall
# Copyright (c) 2019 by Ruslan Variushkin, ruslansvs2@yandex.ua
import argparse
from pathlib import Path
from ipaddress import IPv4Address, IPv4Network
import re
import sys
import json
VERSION = "v0.01.03"


def match_ip(ip, net):
    print("net ", net)
    if ip is None:
        return True
    elif str("*") in net:
        return True
    elif [n for n in net if re.match("[a-z]|[A-Z]", n)]:
        if SERVICE_TAG:
            return True
        else:
            return False
    else:
        for subnet in net:
            print(subnet)
            if IPv4Address(ip) in IPv4Network(subnet):
                return True
    return False


def match_port(Dport, ports):
    #    if "*" not in ports:
    #        print([ int(p) for p in ports if (str("-") not in p)])
    if Dport is None or "*" in ports:
        return True
    elif str(Dport) in ports:
        return True
    else:
        for range_ports in ports:
            if re.search("-", str([i for i in range_ports])):
                data = range_ports.split("-")
                if int(Dport) >= int(data[0]) and int(Dport) <= int(data[1]):
                    return True
                else:
                    return False
    # return False


def output(name, data_rule):
    Set_name = "Rule sets: ", name
    Rule_name = "Rule name: ", data_rule["name"]
    Source_ip = "Source IP:  ", *data_rule["sourceAddresses"]
    Destination_ip = "Destination IP: ", *data_rule["destinationAddresses"]
    Destination_port = "Destination PORT: ", *data_rule["destinationPorts"]
    Protocol = "Protocol: ", *data_rule["protocols"]
    #Data = str(Set_name)+" "+str(Source_ip)+" "+str(Destination_port)
    #Request="your request:\n source IP addess: ",Sip," destanation IP addess: ",Dip," destanation port: ",Dport
    # return name," ",Source_ip," ",Destination_ip," ",Destination_port
    print("===========================\n")
    print(*Set_name)
    print(*Rule_name)
    print(*Source_ip)
    print(*Destination_ip)
    print(*Destination_port)
    print(*Protocol)
    print("\n")
    #table.append([Set_name, Source_ip])
    # print(Data)


def match_proto(protocol, protocols):
    if protocol in protocols:
        return True
    elif protocol is None:
        return True
    else:
        return False


def match(all_rules, Sip=None,
          Dip=None, Dport=None,
          protocol=None):
    for rule_set in all_rules:
        for rule in rule_set["rules"]:
            if (match_port(Dport, rule["destinationPorts"]) and
                match_ip(Sip, rule["sourceAddresses"]) and
                match_ip(Dip, rule["destinationAddresses"]) and
                    match_proto(protocol, rule["protocols"])):
                output(rule_set["name"], rule)
    return


def open_read_file(file, args):
    with open(file, "r") as read_file:
        all_rules = json.load(read_file)
        match(all_rules,
              args.source_ip,
              args.destanation_ip,
              args.destanation_port,
              args.protocol)


def files_loop(args):
    for file in [args.file]:
        open_read_file(file, args)


def args_error(args):
    if not Path(args.file).is_file():
        print("""
             ERROR
             File error, maybe you have to creat json file\n
             try to run: az login
                         az network firewall network-rule collection list -g GroupName -f FirewallName > fwdata.json
                """)
        return False

    return True


def main():
    parser = argparse.ArgumentParser(prog='azfw-search.py')
    parser.add_argument("-s", "--source-ip",
                        help="A source IP address")
    parser.add_argument("-d", "--destanation-ip",
                        help="A destanation IP address")
    parser.add_argument("-p", "--destanation-port",
                        help="A destanation port")
    parser.add_argument("-P", "-proto", "--protocol",
                        help="protocol")
    parser.add_argument(
        "-f",
        "--file",
        help="A data file, the default file is fwdata.json",
        default="fwdata.json")
    parser.add_argument("-tag", "--tag",
                        help="Service tags, example: -tag yes", default=None)
    parser.add_argument("-v", "--version", action='store_true')
    args = parser.parse_args()

    global SERVICE_TAG
    SERVICE_TAG = args.tag
    if args.version:
        print("azfw-search version: ", VERSION)
        return

    if args_error(args):
        files_loop(args)


if __name__ == "__main__":
    main()
