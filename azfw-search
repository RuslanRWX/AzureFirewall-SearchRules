#!/usr/bin/env python3
# azfw-search
# The script can help to find rule in Azure Firewall
# Copyright (c) 2019 by Ruslan Variushkin, ruslansvs2@yandex.ua


import argparse
from pathlib import Path
from ipaddress import IPv4Address, IPv4Network
import re
import sys
import json
VERSION = "v0.04.02"



class output:
    def __init__(self, name, rule):
        self.name = name
        self.rule = rule

#    def create_excel_file():
#        import xlwt

    def output_net(self):
        self.Set_name = "Rule sets: ", self.name
        self.Rule_name = "Rule name: ", self.rule["name"]
        self.Source_ip = "Source IP:  ", *self.rule["sourceAddresses"]
        self.Destination_ip = "Destination IP: ", *self.rule["destinationAddresses"]
        self.Destination_fqdn = "Destination FQDN: ", *self.rule["destinationFqdns"]
        self.Destination_port = "Destination PORT: ", *self.rule["destinationPorts"]
        self.Protocol = "Protocol: ", *self.rule["protocols"]
#        if EXCEL_FILE is not None:
#            return()
#        else:
        return(self.output_network())

    def output_app(self):
        self.port=None
        self.proto=None
        for s in self.rule["protocols"]: self.port, self.proto = s["port"], s["protocolType"]
        self.Set_name = "Rule sets: ", self.name
        self.Rule_name = "Rule name: ", self.rule["name"]
        self.Source_ip = "Source IP:  ", *self.rule["sourceAddresses"]
        self.Port = "Port :  ", self.port
        self.Protocol = "Protocol:  ", self.proto
        self.Target_fqdns = "Target FQDNs: ", *self.rule["targetFqdns"]
        self.fqdn_tags = "Service tag: ", *self.rule["fqdnTags"]
#        if EXCEL_FILE is not None:
#            return()
#        else:
        return(self.output_applicaion())

    def output_applicaion(self):
        return("===========================\n", 
            *self.Set_name,"\n",
            *self.Rule_name,"\n",
            *self.Source_ip,"\n",
            *self.Port,"\n",
            *self.Protocol,"\n",
            *self.Target_fqdns,"\n",
            *self.fqdn_tags,"\n")
        #print(*Destination_port)
    
    def output_network(self):
        return ("===========================\n",
            *self.Set_name,"\n",
            *self.Rule_name,"\n",
            *self.Source_ip,"\n",
            *self.Destination_ip,"\n",
            *self.Destination_fqdn,"\n",
            *self.Destination_port,"\n",
            *self.Protocol,"\n")


def match_ip(ip, net):
    """Match function.
      ip  - IP address 
      net - network
    """
    if ip is None:
        return True
    elif re.search(r"[a-z]", ip):
        match_fqdn(ip, net)
    elif str("*") in net:
        return True
    elif [n for n in net if re.match("[a-z]|[A-Z]", n)]:
        if SERVICE_TAG:
            return True
        else:
            return False
    else:
        for subnet in net:
            if IPv4Address(ip) in IPv4Network(subnet):
                return True
    return False


def match_fqdn(d_fqdn, fqdn):
    """Match fqdn function.
      d_fqdn  - searched domain name
      fqdn - domain name
    """
    if d_fqdn is None:
        return True
    else:
        if [ i for i in fqdn if re.search(d_fqdn, i, re.IGNORECASE) ]:
            return True
        else:
            return False
    return False

def match_port(Dport, ports):
    if Dport is None or "*" in ports:
        return True
    elif str(Dport) in ports:
        return True
    else:
        for range_ports in ports:
            if re.search("-", str([i for i in range_ports])):
                data = range_ports.split("-")
                if int(Dport) >= int(data[0]) and int(Dport) <= int(data[1]):
                    return True
                else:
                    return False
    # return False

def match_proto(protocol, protocols):
    if protocol in protocols:
        return True
    elif protocol is None:
        return True
    else:
        return False

def match_proto_app(protocol, protocols):
    if protocol is None:
        return True
    elif  protocols[0].lower() == protocol.lower():
        return True
    else:
        return False

def match_name(search_name, name):
    if search_name is None:
        return True
    elif re.findall(search_name, name, re.IGNORECASE):
        return True
    else:
        return False

def match(all_rules, Sip=None,
          Dip=None, Dport=None,
          protocol=None, name_set=None,
          name=None, tag=None):
    for rule_set in all_rules:
        for rule in rule_set["rules"]:
            if  ((re.search("networkRuleCollections", rule_set["id"])) and
                match_port(Dport, rule["destinationPorts"]) and
                match_ip(Sip, rule["sourceAddresses"])      and
                (match_ip(Dip, rule["destinationAddresses"]) or match_fqdn(Dip, rule["destinationFqdns"])) and
                match_proto(protocol, rule["protocols"])    and 
                match_name(name_set, rule_set["name"])      and 
                match_name(name, rule["name"])):
                out=output(rule_set["name"], rule)
                print(*out.output_net())
            elif  ((re.search("applicationRuleCollections", rule_set["id"])) and
                match_ip(Sip, rule["sourceAddresses"]) and 
                match_fqdn(Dip, rule["targetFqdns"]) and
                match_fqdn(tag, rule["fqdnTags"]) and
                match_port(Dport, [ str(x["port"]) for x in  rule["protocols"]]) and
                match_proto_app(protocol, [ str(x["protocolType"]) for x in rule["protocols"]])    and 
                match_name(name_set, rule_set["name"]) and
                match_name(name, rule["name"])):
                out=output(rule_set["name"], rule)
                print(*out.output_app())
    return


def open_read_file(file, args):
    with open(file, "r") as read_file:
        all_rules = json.load(read_file)
        match(all_rules,
              args.source_ip,
              args.destanation_ip,
              args.destanation_port,
              args.protocol,
              args.name_set,
              args.name,
              args.tag)


def files_loop(args):
    for file in [args.file]:
        open_read_file(file, args)


def args_error(args):
    if not Path(args.file).is_file():
        print("""
             ERROR
             File error, maybe you have to creat json file\n
             try to run: az login
                         az network firewall network-rule collection list -g GroupName -f FirewallName > fwdata.json
                """)
        return False

    return True


def main():
    parser = argparse.ArgumentParser(prog='azfw-search.py')
    parser.add_argument("-s", "--source-ip",
                        help="A source IP address")
    parser.add_argument("-d", "--destanation-ip",
                        help="A destanation IP address or FQDN")
    parser.add_argument("-p", "--destanation-port",
                        help="A destanation port")
    parser.add_argument("-P", "-proto", "--protocol",
                        help="protocol")
    parser.add_argument("-ns", "-name_set", "--name_set",
                        help="Search rule set name, put regular expression. Example:  azfw-search -f prod.app.json   -d \"\\\*.azure.com\" ")
    parser.add_argument("-n", "-name", "--name",
                        help="Search rule name, put regular expression")
    parser.add_argument(
        "-f",
        "--file",
        help="A data file, the default file is fwdata.json",
        default="fwdata.json")
    parser.add_argument("-tag", "--tag",
                        help="Service tags, example: -tag NAME", default=None)
    parser.add_argument("-ex", "--excel",
                        help="create excel file, example: --excel network_rules.xlsx", default=None)
    parser.add_argument("-v", "--version", action='store_true')
    args = parser.parse_args()

    global SERVICE_TAG
    SERVICE_TAG = args.tag
    EXCEL_FILE = args.excel
#    print(args.source_ip)
#    if not re.fullmatch(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", args.source_ip):
#        print("IP:",args.source_ip)
#        return False
#    else:
#        print("else")
#        return True
    if args.version:
        print("azfw-search version: ", VERSION)
        return

    if args_error(args):
        files_loop(args)


if __name__ == "__main__":
    main()
